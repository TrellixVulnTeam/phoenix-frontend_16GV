"use strict";
// Copyright 2022 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const templates_1 = require("./templates");
const utils_1 = require("../../utils");
const utils_2 = require("../../utils");
const { readFile, rm, mkdir, writeFile, copyFile } = fs_1.promises;
const DEFAULT_DEV_PORT = 7812;
let _nuxt;
const getNuxt = (getProjectPath) => __awaiter(void 0, void 0, void 0, function* () { return _nuxt || (_nuxt = yield (() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const nuxt = require(getProjectPath('node_modules', 'nuxt'));
        return Object.assign(Object.assign({}, nuxt), { buildNuxt: nuxt.build, isNuxt3: () => false, getNuxtVersion: () => nuxt.Nuxt.version.split('v')[1] });
    }
    catch (e) {
        return Object.assign(Object.assign({}, (yield import(getProjectPath('node_modules', '@nuxt', 'kit', 'dist', 'index.mjs')))), { 
            // Simplify until we can pass the app to serve, isNuxt3 requires an app be passed
            // though unsure if we even need to do this Next.js style, perhaps we can serve directly
            isNuxt3: () => true });
    }
}))()); });
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { loadNuxt, isNuxt3, buildNuxt, loadNuxtConfig } = yield getNuxt(getProjectPath);
    const nuxtApp = yield loadNuxt({
        for: 'build',
        cwd: getProjectPath(),
        rootDir: getProjectPath(),
        overrides: { nitro: { preset: 'node' } },
    });
    yield buildNuxt(nuxtApp);
    const nuxtConfig = yield loadNuxtConfig({
        cwd: getProjectPath(),
        rootDir: getProjectPath(),
    });
    const baseURL = isNuxt3() ? nuxtConfig.app.baseURL : '';
    const buildAssetsDir = isNuxt3() ? nuxtConfig.app.buildAssetsDir : '_nuxt';
    const distDir = isNuxt3() ? '.output' : (0, path_1.join)('.nuxt', 'dist');
    const deployPath = (...args) => config.dist ? (0, path_1.join)(config.dist, ...args) : getProjectPath('.deploy', ...args);
    const getHostingPath = (...args) => deployPath('hosting', ...baseURL.split('/'), ...args);
    yield rm(deployPath(), { recursive: true, force: true });
    // TODO also check Nuxt's settings
    const needsCloudFunction = !!config.function;
    yield mkdir(deployPath('functions'), { recursive: true });
    yield mkdir(getHostingPath(buildAssetsDir), { recursive: true });
    if (isNuxt3()) {
        if (needsCloudFunction) {
            yield (0, utils_2.exec)(`cp -r ${getProjectPath(distDir, 'server', '*')} ${deployPath('functions')}`);
        }
        yield (0, utils_2.exec)(`cp -r ${getProjectPath(distDir, 'public', '*')} ${deployPath('hosting')}`);
    }
    else {
        if (needsCloudFunction) {
            yield (0, utils_2.exec)(`cp -r ${getProjectPath(distDir, '..')} ${deployPath('functions')}`);
        }
        yield (0, utils_2.exec)(`cp -r ${getProjectPath(distDir, 'client', '*')} ${deployPath('hosting', buildAssetsDir)}`);
        yield (0, utils_2.exec)(`cp -r ${getProjectPath('static', '*')} ${deployPath('hosting')}`);
    }
    const packageJsonBuffer = yield readFile(getProjectPath('package.json'));
    const packageJson = JSON.parse(packageJsonBuffer.toString());
    let firebaseProjectConfig = null;
    const { project, site } = config;
    if (project && site) {
        // TODO check if firebase/auth is used
        const hasFirebaseDependency = !!((_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a.firebase);
        if (needsCloudFunction && hasFirebaseDependency) {
            const { default: firebaseTools } = require('firebase-tools');
            const { sites } = yield firebaseTools.hosting.sites.list(Object.assign({ project }, (0, utils_2.defaultFirebaseToolsOptions)(deployPath())));
            const selectedSite = sites.find(it => (0, utils_1.shortSiteName)(it) === site);
            if (selectedSite) {
                const { appId } = selectedSite;
                if (appId) {
                    const result = yield firebaseTools.apps.sdkconfig('web', appId, (0, utils_2.defaultFirebaseToolsOptions)(deployPath()));
                    firebaseProjectConfig = result.sdkConfig;
                }
                else {
                    // TODO add color yellow, maybe prompt?
                    console.warn(`No Firebase app associated with site ${site}, unable to provide authenticated server context`);
                }
            }
        }
    }
    if (needsCloudFunction) {
        yield Promise.all([
            copyFile(getProjectPath('package-lock.json'), deployPath('functions', 'package-lock.json')).catch(() => { }),
            copyFile(getProjectPath('yarn.lock'), deployPath('functions', 'yarn.lock')).catch(() => { }),
            (0, templates_1.newPackageJson)(packageJson, getProjectPath).then(json => writeFile(deployPath('functions', 'package.json'), json)),
            writeFile(deployPath('functions', 'server.js'), (0, templates_1.newServerJs)(config, firebaseProjectConfig, isNuxt3())),
        ]);
    }
    if (needsCloudFunction) {
        // TODO add to the firebaseTools log
        yield (0, utils_2.spawn)('npm', ['i', '--prefix', deployPath('functions'), '--only', 'production'], {}, stdoutChunk => {
            console.log(stdoutChunk.toString());
        }, errChunk => {
            console.error(errChunk.toString());
        });
    }
    return { usingCloudFunctions: needsCloudFunction };
});
exports.build = build;
